module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q);
    /*
    bcd_counter c1(clk,reset,q[3:0]);
    bcd_counter c2(clk,reset,q[7:4]);
    bcd_counter c3(clk,reset,q[11:8]);
    bcd_counter c4(clk,reset,q[15:12]); 
    */
    always(posedge clk)begin
        if(reset)
            q<=0;
        else
            begin
                if(ena=2'b00)
                        if(q==4'b1001)
                           q<=0;
                        else
                            begin
                            q[3:0]<=q+1;
                            q[15:4]<=q[15:4];
                            end
                else if(ena=2'b01)
                        if(q==4'b1001)
                           q<=0;
                        else
                            begin
                            q[3:0]<=q+1;
                            q[]    
                            q[15:8]<=q[15:8];
                            end
                    
                         
                    
    
    
    
    

endmodule

module bcd_counter (
    input clk,
    input reset,        // Synchronous active-high reset
    output [3:0] q);
    always@(posedge clk)begin
        if(reset==1 || q==4'b1001)
            q<=0;
        else
            q<=q+1;
    end
endmodule